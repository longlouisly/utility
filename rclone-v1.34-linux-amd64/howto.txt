$ rclone config

# then login and grant rclone permissions
# this will save config files in ~/.rclone.conf

# use --no-traverse so that rclone doesn't read all files on dest first

# just copy
$ rclone -v --no-traverse copy source/path drive:dest/path

# make destination match the source
$ rclone -v sync source/path drive:dest/path

# Apparenty rclone gets rate limited using default client id.
# Created own 
296848171852-dsgn64iq5tj776sd6ts5v925mf5hf5ql.apps.googleusercontent.com
tAah2mDknuLFCY5o4rawbvt3

# Making your own client_id
# When you use rclone with Google drive in its default configuration you are using rclone’s client_id. This is shared between all the rclone users. There is a global rate limit on the number of queries per second that each client_id can do set by Google. rclone already has a high quota and I will continue to make sure it is high enough by contacting Google.
# However you might find you get better performance making your own client_id if you are a heavy user. Or you may not depending on exactly how Google have been raising rclone’s rate limit.
# Here is how to create your own Google Drive client ID for rclone:
# 
# Log into the Google API Console with your Google account. It doesn’t matter what Google account you use. (It need not be the same account as the Google Drive you want to access)
# Select a project or create a new project.
# Under “ENABLE APIS AND SERVICES” search for “Drive”, and enable the then “Google Drive API”.
# Click “Credentials” in the left-side panel (not “Create credentials”, which opens the wizard), then “Create credentials”, then “OAuth client ID”. It will prompt you to set the OAuth consent screen product name, if you haven’t set one already.
# Choose an application type of “other”, and click “Create”. (the default name is fine)
# It will show you a client ID and client secret. Use these values in rclone config to add a new remote or edit an existing remote.
# 
# (Thanks to @balazer on github for these instructions.)

 
 
 


# encryption
First of all you need rclone to setup a remote by using "rclone config", say
Amazon Cloud Drive and give it a name. So for instance you call it "acd".
After you have done the previous step you can try to see if things went fine by
using "rclone lsd acd:/" If you want to store encrypted stuff as well as
unencrypted I suggest you create a folder named "encrypted" on your amazon
cloude drive. When you've done this you use "rclone config" again and this time
choose option 5 "Encrypt/Decrypt a remote" and choose to use "acd:/encrypt" and
give it a name, so for instance "acdencrypted". What this does is add another
remote to rclone named "acdencrypted" which will transparently encode
everything you put in there and decrypt everything you pull out of there.

# to decrypt a file that you downloaded from google drive:
# add the following to your .rclone.conf and replace the password fields with the fields from your other encrypted config
# unfortunately you'd need that and cannot just recover it from the password alone... i think.

[local]
type = local
nounc =

[local-crypt]
type = crypt
remote = local:/home/user/directory
filename_encryption = standard
password = (PASSWORD_FROM_ENC_REMOTE)
password2 = (PASSWORD2_FROM_ENC_REMOTE)



# ACTUALLY, it may be possible to just setup rclone on a new machine, using the same password and salt
# This will hash to a different thing on the file, but still work as far as I can tell.
